import dinos from './dino.json';
import images from './images/*.png';

/**
 * @description Respresents a dinosaur
 * @constructor
 * @param {string} species - The species of the dinosaur
 * @param {number} weight - The weight of the dinosaur
 * @param {number} height - The height of the dinosaur
 * @param {string} diet - The diet of the dinosaur
 * @param {string} where - Where the dinosaur was located
 * @param {string} when - The epoch the dinosaur was active
 * @param {string} fact - A given fact about the dinosaur
 */
function Dinosaur({
  species, weight, height, diet, where, when, fact,
}) {
  this.species = species;
  this.weight = weight;
  this.height = height;
  this.diet = diet;
  this.where = where;
  this.when = when;
  this.fact = fact;
  this.renderable = {
    name: this.species,
    image: images[this.species.toLowerCase()],
  };
}

/**
 * @description Respresents a human
 * @constructor
 * @param {string} name - The name of the human
 * @param {number} feet - The height of the human (feets only)
 * @param {number} inches - The height of the human (inches only)
 * @param {number} weight - The weight of the human
 * @param {diet} where - The diet of the human
 */
function Human({
  name, feet, inches, weight, diet,
}) {
  this.name = name;
  this.height = feet * 12 + inches;
  this.weight = weight;
  this.diet = diet;
  this.image = images.human;
  this.renderable = {
    name: this.name,
    image: images.human,
  };
}

/**
 * @description Compares the weight of the given dinosaur with the human's
 * @param {Human} - human
 * @returns {string} A fact according the difference of weight
 */
Dinosaur.prototype.compareWeight = function (human) {
  const { weight } = human;
  const diff = Math.abs(this.weight - weight);

  if (this.weight < weight) {
    return `I weight ${diff} lbs less than you.`;
  }

  if (this.weight > weight) {
    return `I weigh ${diff} lbs more than you.`;
  }

  return 'We are the same weight.';
};

/**
 * @description Compares the height of the given dinosaur with the human's
 * @param {Human} - human
 * @returns {string} A fact according the difference of height
 */
Dinosaur.prototype.compareHeight = function (human) {
  const { height } = human;
  const diff = Math.abs(this.height - height);

  if (this.height < height) {
    return `I am ${diff} inches shorter than you.`;
  }

  if (this.height > height) {
    return `I am ${diff} inches taller than you.`;
  }

  return 'We are the same size.';
};

/**
 * @description Compares the diet of the given dinosaur with the human's
 * @param {Human} - human
 * @returns {string} A fact according the difference of the diet
 */
Dinosaur.prototype.compareDiet = function (human) {
  const diet = human.diet.toLowerCase();

  if (this.diet !== diet) {
    return `You are a ${diet} but I'm a ${this.diet}`;
  }

  return `We are both ${diet}'s`;
};

/**
 * @description Returns a random fact generated by prepared functions
 * @returns {string} A random fact
 */
Dinosaur.prototype.compareRandom = function (human) {
  const facts = ['compareDiet', 'compareHeight', 'compareWeight'];
  const randomNumber = Math.floor(Math.random() * Math.floor(facts.length));

  return this[facts[randomNumber]](human);
};

/**
 * @description Creates a single tile with name, image and fact if possible
 * @returns An copy of the DOM fragment, filled with values from the obj
 */
function createTile(fragment, obj, compareTo) {
  const instance = fragment.content.cloneNode(true);

  const name = instance.querySelector('#name');
  name.textContent = obj.renderable.name;

  const image = instance.querySelector('#image');
  image.src = obj.renderable.image;

  const fact = instance.querySelector('#fact');

  if (!compareTo) {
    fact.remove();
  } else if (obj.renderable.name === 'Pigeon') {
    fact.textContent = 'All birds are dinosaurs.';
  } else {
    fact.textContent = obj.compareRandom(compareTo);
  }

  return instance;
}

/**
 * @description Create tiles for dinosaur's and human and append to document
 */
function createTiles(human) {
  const fragment = document.getElementById('dino-grid-template');
  const tiles = dinos.Dinos.map((dino) => createTile(fragment, new Dinosaur(dino), human));

  // add human in the middle of the dino tiles
  tiles.splice(4, 0, createTile(fragment, human));

  document.getElementById('grid').append(...tiles);
}

/**
 * @description Removes the form in the document
 */
function removeFormFromScreen() {
  document.getElementById('dino-compare').remove();
}

document.getElementById('dino-compare').addEventListener('submit', () => {
  // get human data
  const human = (function () {
    const form = document.getElementById('dino-compare');
    const data = new FormData(form);
    return new Human(Object.fromEntries(data));
  }());

  // hide form
  removeFormFromScreen();

  // add tiles
  createTiles(human);
});
